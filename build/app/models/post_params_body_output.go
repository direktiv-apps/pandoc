// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostParamsBodyOutput post params body output
//
// swagger:model postParamsBodyOutput
type PostParamsBodyOutput struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// scope
	// Required: true
	// Enum: [workflow instance namespace]
	Scope *string `json:"scope"`
}

// Validate validates this post params body output
func (m *PostParamsBodyOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostParamsBodyOutput) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var postParamsBodyOutputTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["workflow","instance","namespace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postParamsBodyOutputTypeScopePropEnum = append(postParamsBodyOutputTypeScopePropEnum, v)
	}
}

const (

	// PostParamsBodyOutputScopeWorkflow captures enum value "workflow"
	PostParamsBodyOutputScopeWorkflow string = "workflow"

	// PostParamsBodyOutputScopeInstance captures enum value "instance"
	PostParamsBodyOutputScopeInstance string = "instance"

	// PostParamsBodyOutputScopeNamespace captures enum value "namespace"
	PostParamsBodyOutputScopeNamespace string = "namespace"
)

// prop value enum
func (m *PostParamsBodyOutput) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postParamsBodyOutputTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostParamsBodyOutput) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post params body output based on context it is used
func (m *PostParamsBodyOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostParamsBodyOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostParamsBodyOutput) UnmarshalBinary(b []byte) error {
	var res PostParamsBodyOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
